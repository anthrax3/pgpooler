# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: show_config()
#
# Description:
#   Show session configuration.
#
# Usage:
#   show_config
#
# Examples:
#   show_config
#

function show_config() {

  local _FUNCTION_ID="show_config"
  local _STATE=0

  local _session_arg="$1"

  for _svar in "${_session_variables[@]}" ; do

    _key_description=$(echo "$_svar" | awk -v FS="(:|:)" '{print $1}')
    _key_id=$(echo "$_svar" | awk -v FS="(:|:)" '{print $2}')
    _key_var=$(echo "$_svar" | awk -v FS="(:|:)" '{print $3}')

    if [[ -z "$_key_id" ]] ; then

      printf "stdout: %s\n" "invalid session param"

    fi

    if [[ "$_key_id" != "web" ]] || [[ "$_key_id" != "db" ]] ; then

      _i="" ; eval _i='$'"$_key_var"

    else

      _i="true"

    fi

    # Show specific key.
    if [[ "$_session_arg" == "$_key_id" ]] ; then

      # Print without key value.
      if [[ -z "$_i" ]] ; then

        printf "{\n  \"%s\",\n  { \"\e[0;30m%s\e[m\":\"\e[1;39m%s\e[m\" }\n}\n" "$_key_description" "$_key_id" ""

      # Print with key value.
      else

        if [[ "$_key_id" == "web" ]] ; then

          printf "{\n  \"%s\",\n" "$_key_description"

          for i in "${_web_stack[@]}" ; do

            printf "  { \"\e[0;30m%s\e[m\":\"\e[1;39m%s\e[m\" }\n" "$_key_id" "$i"

          done

          printf "}\n"

        elif [[ "$_key_id" == "db" ]] ; then

          printf "{\n  \"%s\",\n" "$_key_description"

          for i in "${_db_stack[@]}" ; do

            printf "  { \"\e[0;30m%s\e[m\":\"\e[1;39m%s\e[m\" }\n" "$_key_id" "$i"

          done

          printf "}\n"

        else

          printf "{\n  \"%s\",\n  { \"\e[0;30m%s\e[m\":\"\e[1;39m%s\e[m\" }\n}\n" "$_key_description" "$_key_id" "$_i"

        fi

      fi

    # Show all keys.
    elif [[ -z "$_session_arg" ]] ; then

      # Print without key value.
      if [[ -z "$_i" ]] ; then

        printf "{\n  \"%s\",\n  { \"\e[0;30m%s\e[m\":\"\e[1;39m%s\e[m\" }\n}\n" "$_key_description" "$_key_id" ""

      # Print with key value.
      else

        if [[ "$_key_id" == "web" ]] ; then

          printf "{\n  \"%s\",\n" "$_key_description"

          for i in "${_web_stack[@]}" ; do

            printf "  { \"\e[0;30m%s\e[m\",\"\e[1;39m%s\e[m\" }\n" "$_key_id" "$i"

          done

          printf "}\n"

        elif [[ "$_key_id" == "db" ]] ; then

          printf "{\n  \"%s\",\n" "$_key_description"

          for i in "${_db_stack[@]}" ; do

            printf "  { \"\e[0;30m%s\e[m\":\"\e[1;39m%s\e[m\" }\n" "$_key_id" "$i"

          done

          printf "}\n"

        else

          printf "{\n  \"%s\",\n  { \"\e[0;30m%s\e[m\":\"\e[1;39m%s\e[m\" }\n}\n" "$_key_description" "$_key_id" "$_i"

        fi

      fi

    fi

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: set_config()
#
# Description:
#   Set config configuration.
#
# Usage:
#   set_config
#
# Examples:
#   set_config
#

function set_config() {

  local _FUNCTION_ID="set_config"
  local _STATE=0

  local _session_arg="$1"

  case ${input_array[2]} in

    file)
      _config_file="${input_array[3]}"

      if [[ -e "${_config}/${_config_file}" ]] ; then

        source "${_config}/${_config_file}"

      else

        printf "%s\n" "file not found"

      fi
      ;;
    user)
      _username="${input_array[3]}"
      ;;
    port)
      _port_number="${input_array[3]}"
      ;;
    web|db)

      case ${input_array[3]} in

        add)
          add_element
          ;;
        del)
          del_element
          ;;
        *)
          printf "stdout: %s\n" "unknown key" ;;

      esac
      ;;
    *)
      printf "stdout: %s\n" "unknown key" ;;

  esac

  return $_STATE

}
