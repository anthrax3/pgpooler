# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: show_cluster()
#
# Description:
#   Show cluster configuration.
#
# Usage:
#   show_cluster
#
# Examples:
#   show_cluster
#

function show_cluster() {

  local _FUNCTION_ID="show_cluster"
  local _STATE=0

  local _session_arg="$1"

  if [[ -z "$_session_arg" ]] ; then

    _web_current_stack=("${_web_stack[@]}")

  else

    _web_current_stack=("${_session_arg}")

  fi

  for _wbs in "${_web_current_stack[@]}" ; do

    local _counter=0

    printf "\n    \e[0;30m%s\e[m : \e[1;39m%s\e[m\n" "node" "$_wbs"

    # shellcheck disable=SC2034,SC2154
    for _dbs in "${_db_stack[@]}" ; do

      _node_info=($(pcp_node_info -h "$_wbs" -p "$_port_number" -U "$_username" -n "$_counter" -w))

      if [[ "${_node_info[4]}" -eq 0 ]] ; then

        _status_info="Initialization"
        _trgb="0;32m"

      elif [[ "${_node_info[4]}" -eq 1 ]] ; then

        _status_info="Node is up. No connections yet"
        _trgb="0;34m"

      elif [[ "${_node_info[4]}" -eq 1 ]] ; then

        _status_info="Node is up. Connections are pooled."
        _trgb="0;32m"

      elif [[ "${_node_info[4]}" -eq 1 ]] ; then

        _status_info="Node is down."
        _trgb="0;31m"

      fi

      # shellcheck disable=SC2183,SC2046,SC2086
      printf " \e[0;30mbackend\e[m : %s (\e[${_trgb}%s\e[m)\n" "${_node_info[0]}" "${_node_info[4]}"
      printf " backend :   code: \e[0;34m%s\e[m, info: \e[0;34m%s\e[m" "${_node_info[2]}"  "${_status_info}"

      _counter=$((_counter + 1))

    done

  done

  echo

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: show_databases()
#
# Description:
#   Show databases status.
#
# Usage:
#   show_databases
#
# Examples:
#   show_databases
#

function show_databases() {

  local _FUNCTION_ID="show_databases"
  local _STATE=0

  local _session_arg="$1"

  printf "ID\t DATABASE\n"

  # shellcheck disable=SC2154
  for _db in "${_db_env[@]}" ; do

    # shellcheck disable=SC2034
    _id=$(echo "$_db" | awk -v FS="(:|:)" '{print $1}')
    # shellcheck disable=SC2034
    _db_name=$(echo "$_db" | awk -v FS="(:|:)" '{print $2}')

    check_conn "$_db_name" 5432
    _db_status="$?"

    if [[ "$_db_status" -eq 0 ]] ; then

      _db_state="up"
      _trgb="0;32"

    else

      _db_state="down"
      _trgb="0;31"

    fi

    printf " \e[1;34m%s\e[m\t  \e[1;39m%s\e[m (\e[${_trgb}m%s\e[m)\n" "$_id" "$_db_name" "$_db_state"

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: set_cluster()
#
# Description:
#   Set cluster configuration.
#
# Usage:
#   set_cluster
#
# Examples:
#   set_cluster
#

function set_cluster() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="set_cluster"
  local _STATE=0

  local _session_arg="$1"

  # shellcheck disable=SC2154
  case ${input_array[2]} in

    attach)
      attach_node
      ;;

    detach)
      detach_node
      ;;

    *)
      printf "stdout: %s\n" "unknown key" ;;

  esac

  return $_STATE

}
