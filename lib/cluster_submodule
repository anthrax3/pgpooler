# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: show_cluster()
#
# Description:
#   Show cluster configuration.
#
# Usage:
#   show_cluster
#
# Examples:
#   show_cluster
#

function show_cluster() {

  local _FUNCTION_ID="show_cluster"
  local _STATE=0

  local _session_arg="$1"

  if [[ -z "$_session_arg" ]] ; then

    _web_current_stack=("${_web_stack[@]}")

  else

    _web_current_stack=("${_session_arg}")

  fi

  for _wbs in "${_web_current_stack[@]}" ; do

    check_conn "$_wbs" 22
    _web_status="$?"

    if [[ "$_web_status" -eq 0 ]] ; then

      _web_state="OK"
      _trgb="0;32"

    else

      _web_state="ERR"
      _trgb="0;31"

    fi

    local _counter=0

    printf "%s" "

    Status codes:
      0 - This state is only used during the initialization.
          PCP will never display it.
      1 - Node is up. No connections yet.
      2 - Node is up. Connections are pooled.
      3 - Node is down.

"
    if [[ "$_web_status" -eq 0 ]] ; then

      printf "\n \e[1;39m%s\e[m\n" "$_wbs"

      # shellcheck disable=SC2034,SC2154
      for _dbs in "${_db_stack[@]}" ; do

        _node_info=($(pcp_node_info -h "$_wbs" -p "$_port_number" -U "$_username" -n "$_counter" -w 2>/dev/null))
        _cstate="$?"

        if [[ "$_cstate" -eq 0 ]] ; then

          if [[ "${_node_info[2]}" -eq 0 ]] ; then

            _node_status="INIT"
            _trgb="0;38m"

          elif [[ "${_node_info[2]}" -eq 1 ]] ; then

            _node_status="UP"
            _trgb="0;34m"

          elif [[ "${_node_info[2]}" -eq 2 ]] ; then

            _node_status="UP"
            _trgb="0;32m"

          elif [[ "${_node_info[2]}" -eq 3 ]] ; then

            _node_status="DOWN"
            _trgb="0;31m"

          fi

          # shellcheck disable=SC2183,SC2046,SC2086
          printf "  %s" "${_node_info[0]}"
          printf " (code: \e[0;34m%s\e[m, status: \e[${_trgb}%s\e[m)\n" "${_node_info[2]}" "${_node_status}"

        fi

        _counter=$((_counter + 1))

      done

    else

      printf "\n \e[1;39m%s\e[m - connection error\n" "$_wbs"

    fi

  done

  echo

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: show_databases()
#
# Description:
#   Show databases status.
#
# Usage:
#   show_databases
#
# Examples:
#   show_databases
#

function show_databases() {

  local _FUNCTION_ID="show_databases"
  local _STATE=0

  local _session_arg="$1"

  printf "ID\t DATABASE\n"

  # shellcheck disable=SC2154
  for _db in "${_db_env[@]}" ; do

    # shellcheck disable=SC2034
    _id=$(echo "$_db" | awk -v FS="(:|:)" '{print $1}')
    # shellcheck disable=SC2034
    _db_name=$(echo "$_db" | awk -v FS="(:|:)" '{print $2}')

    check_conn "$_db_name" 5432
    _db_status="$?"

    if [[ "$_db_status" -eq 0 ]] ; then

      _db_state="OK"
      _trgb="0;32"

    else

      _db_state="ERR"
      _trgb="0;31"

    fi

    printf " \e[1;34m%s\e[m\t  \e[1;39m%s\e[m" "$_id" "$_db_name"
    printf " (port: %s, status: \e[${_trgb}m%s\e[m)\n" "5432" "$_db_state"

  done

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: set_cluster()
#
# Description:
#   Set cluster configuration.
#
# Usage:
#   set_cluster
#
# Examples:
#   set_cluster
#

function set_cluster() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="set_cluster"
  local _STATE=0

  local _session_arg="$1"

  # shellcheck disable=SC2154
  case ${input_array[2]} in

    attach)
      attach_node
      ;;

    detach)
      detach_node
      ;;

    *)
      printf "stdout: %s\n" "unknown key" ;;

  esac

  return $_STATE

}
