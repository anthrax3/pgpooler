# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: attach_node()
#
# Description:
#   Attach node to cluster.
#
# Usage:
#   attach_node
#
# Examples:
#   attach_node
#

function attach_node() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="attach_node"
  local _STATE=0

  # shellcheck disable=SC2154
  if [[ "${input_array[3]}" ]] ; then

    for i in "${_web_stack[@]}" ; do

      if [[ "$i" == "${input_array[3]}" ]] ; then

        pcp_attach_node -h "$i" -p "$_port_number" -U "$_username" -n "${input_array[4]}" -w

      elif [[ "$i" == "all" ]] ; then

        pcp_attach_node -h "$i" -p "$_port_number" -U "$_username" -n "${input_array[4]}" -w

      fi

    done

  else

    printf "stdout: %s\n" "empty node!"

  fi

  return $_STATE

}

# ``````````````````````````````````````````````````````````````````````````````
# Function name: detach_node()
#
# Description:
#   Detach node to cluster.
#
# Usage:
#   detach_node
#
# Examples:
#   detach_node
#

function detach_node() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="detach_node"
  local _STATE=0

  # shellcheck disable=SC2154
  if [[ "${input_array[3]}" ]] ; then

    for i in "${_web_stack[@]}" ; do

      if [[ "$i" == "${input_array[3]}" ]] ; then

        pcp_detach_node -h "$i" -p "$_port_number" -U "$_username" -n "${input_array[4]}" -w

      elif [[ "$i" == "all" ]] ; then

        pcp_detach_node -h "$i" -p "$_port_number" -U "$_username" -n "${input_array[4]}" -w

      fi

    done

  else

    printf "stdout: %s\n" "empty node!"

  fi

  return $_STATE

}
